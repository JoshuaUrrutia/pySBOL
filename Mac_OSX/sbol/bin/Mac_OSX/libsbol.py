# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsbol', [dirname(__file__)])
        except ImportError:
            import _libsbol
            return _libsbol
        if fp is not None:
            try:
                _mod = imp.load_module('_libsbol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsbol = swig_import_helper()
    del swig_import_helper
else:
    import _libsbol
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbol.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libsbol.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsbol.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsbol.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsbol.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsbol.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsbol.SwigPyIterator_copy(self)

    def next(self):
        return _libsbol.SwigPyIterator_next(self)

    def __next__(self):
        return _libsbol.SwigPyIterator___next__(self)

    def previous(self):
        return _libsbol.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsbol.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsbol.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsbol.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsbol.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsbol.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsbol.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsbol.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libsbol.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class _IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._IntVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._IntVector___bool__(self)

    def __len__(self):
        return _libsbol._IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._IntVector___setitem__(self, *args)

    def pop(self):
        return _libsbol._IntVector_pop(self)

    def append(self, x):
        return _libsbol._IntVector_append(self, x)

    def empty(self):
        return _libsbol._IntVector_empty(self)

    def size(self):
        return _libsbol._IntVector_size(self)

    def swap(self, v):
        return _libsbol._IntVector_swap(self, v)

    def begin(self):
        return _libsbol._IntVector_begin(self)

    def end(self):
        return _libsbol._IntVector_end(self)

    def rbegin(self):
        return _libsbol._IntVector_rbegin(self)

    def rend(self):
        return _libsbol._IntVector_rend(self)

    def clear(self):
        return _libsbol._IntVector_clear(self)

    def get_allocator(self):
        return _libsbol._IntVector_get_allocator(self)

    def pop_back(self):
        return _libsbol._IntVector_pop_back(self)

    def erase(self, *args):
        return _libsbol._IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._IntVector_push_back(self, x)

    def front(self):
        return _libsbol._IntVector_front(self)

    def back(self):
        return _libsbol._IntVector_back(self)

    def assign(self, n, x):
        return _libsbol._IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._IntVector_resize(self, *args)

    def insert(self, *args):
        return _libsbol._IntVector_insert(self, *args)

    def reserve(self, n):
        return _libsbol._IntVector_reserve(self, n)

    def capacity(self):
        return _libsbol._IntVector_capacity(self)
    __swig_destroy__ = _libsbol.delete__IntVector
    __del__ = lambda self: None
_IntVector_swigregister = _libsbol._IntVector_swigregister
_IntVector_swigregister(_IntVector)

class _StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._StringVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._StringVector___bool__(self)

    def __len__(self):
        return _libsbol._StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._StringVector___setitem__(self, *args)

    def pop(self):
        return _libsbol._StringVector_pop(self)

    def append(self, x):
        return _libsbol._StringVector_append(self, x)

    def empty(self):
        return _libsbol._StringVector_empty(self)

    def size(self):
        return _libsbol._StringVector_size(self)

    def swap(self, v):
        return _libsbol._StringVector_swap(self, v)

    def begin(self):
        return _libsbol._StringVector_begin(self)

    def end(self):
        return _libsbol._StringVector_end(self)

    def rbegin(self):
        return _libsbol._StringVector_rbegin(self)

    def rend(self):
        return _libsbol._StringVector_rend(self)

    def clear(self):
        return _libsbol._StringVector_clear(self)

    def get_allocator(self):
        return _libsbol._StringVector_get_allocator(self)

    def pop_back(self):
        return _libsbol._StringVector_pop_back(self)

    def erase(self, *args):
        return _libsbol._StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._StringVector_push_back(self, x)

    def front(self):
        return _libsbol._StringVector_front(self)

    def back(self):
        return _libsbol._StringVector_back(self)

    def assign(self, n, x):
        return _libsbol._StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._StringVector_resize(self, *args)

    def insert(self, *args):
        return _libsbol._StringVector_insert(self, *args)

    def reserve(self, n):
        return _libsbol._StringVector_reserve(self, n)

    def capacity(self):
        return _libsbol._StringVector_capacity(self)
    __swig_destroy__ = _libsbol.delete__StringVector
    __del__ = lambda self: None
_StringVector_swigregister = _libsbol._StringVector_swigregister
_StringVector_swigregister(_StringVector)

class _SBOLObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _SBOLObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _SBOLObjectVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._SBOLObjectVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._SBOLObjectVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._SBOLObjectVector___bool__(self)

    def __len__(self):
        return _libsbol._SBOLObjectVector___len__(self)

    def __getslice__(self, i, j):
        return _libsbol._SBOLObjectVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libsbol._SBOLObjectVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libsbol._SBOLObjectVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libsbol._SBOLObjectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libsbol._SBOLObjectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libsbol._SBOLObjectVector___setitem__(self, *args)

    def pop(self):
        return _libsbol._SBOLObjectVector_pop(self)

    def append(self, x):
        return _libsbol._SBOLObjectVector_append(self, x)

    def empty(self):
        return _libsbol._SBOLObjectVector_empty(self)

    def size(self):
        return _libsbol._SBOLObjectVector_size(self)

    def swap(self, v):
        return _libsbol._SBOLObjectVector_swap(self, v)

    def begin(self):
        return _libsbol._SBOLObjectVector_begin(self)

    def end(self):
        return _libsbol._SBOLObjectVector_end(self)

    def rbegin(self):
        return _libsbol._SBOLObjectVector_rbegin(self)

    def rend(self):
        return _libsbol._SBOLObjectVector_rend(self)

    def clear(self):
        return _libsbol._SBOLObjectVector_clear(self)

    def get_allocator(self):
        return _libsbol._SBOLObjectVector_get_allocator(self)

    def pop_back(self):
        return _libsbol._SBOLObjectVector_pop_back(self)

    def erase(self, *args):
        return _libsbol._SBOLObjectVector_erase(self, *args)

    def __init__(self, *args):
        this = _libsbol.new__SBOLObjectVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _libsbol._SBOLObjectVector_push_back(self, x)

    def front(self):
        return _libsbol._SBOLObjectVector_front(self)

    def back(self):
        return _libsbol._SBOLObjectVector_back(self)

    def assign(self, n, x):
        return _libsbol._SBOLObjectVector_assign(self, n, x)

    def resize(self, *args):
        return _libsbol._SBOLObjectVector_resize(self, *args)

    def insert(self, *args):
        return _libsbol._SBOLObjectVector_insert(self, *args)

    def reserve(self, n):
        return _libsbol._SBOLObjectVector_reserve(self, n)

    def capacity(self):
        return _libsbol._SBOLObjectVector_capacity(self)
    __swig_destroy__ = _libsbol.delete__SBOLObjectVector
    __del__ = lambda self: None
_SBOLObjectVector_swigregister = _libsbol._SBOLObjectVector_swigregister
_SBOLObjectVector_swigregister(_SBOLObjectVector)

class _MapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MapVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._MapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._MapVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._MapVector___bool__(self)

    def __len__(self):
        return _libsbol._MapVector___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsbol._MapVector___getitem__(self, key)

    def __delitem__(self, key):
        return _libsbol._MapVector___delitem__(self, key)

    def has_key(self, key):
        return _libsbol._MapVector_has_key(self, key)

    def keys(self):
        return _libsbol._MapVector_keys(self)

    def values(self):
        return _libsbol._MapVector_values(self)

    def items(self):
        return _libsbol._MapVector_items(self)

    def __contains__(self, key):
        return _libsbol._MapVector___contains__(self, key)

    def key_iterator(self):
        return _libsbol._MapVector_key_iterator(self)

    def value_iterator(self):
        return _libsbol._MapVector_value_iterator(self)

    def __setitem__(self, *args):
        return _libsbol._MapVector___setitem__(self, *args)

    def asdict(self):
        return _libsbol._MapVector_asdict(self)

    def __init__(self, *args):
        this = _libsbol.new__MapVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _libsbol._MapVector_empty(self)

    def size(self):
        return _libsbol._MapVector_size(self)

    def swap(self, v):
        return _libsbol._MapVector_swap(self, v)

    def begin(self):
        return _libsbol._MapVector_begin(self)

    def end(self):
        return _libsbol._MapVector_end(self)

    def rbegin(self):
        return _libsbol._MapVector_rbegin(self)

    def rend(self):
        return _libsbol._MapVector_rend(self)

    def clear(self):
        return _libsbol._MapVector_clear(self)

    def get_allocator(self):
        return _libsbol._MapVector_get_allocator(self)

    def count(self, x):
        return _libsbol._MapVector_count(self, x)

    def erase(self, *args):
        return _libsbol._MapVector_erase(self, *args)

    def find(self, x):
        return _libsbol._MapVector_find(self, x)

    def lower_bound(self, x):
        return _libsbol._MapVector_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsbol._MapVector_upper_bound(self, x)
    __swig_destroy__ = _libsbol.delete__MapVector
    __del__ = lambda self: None
_MapVector_swigregister = _libsbol._MapVector_swigregister
_MapVector_swigregister(_MapVector)

class _MapOfStringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MapOfStringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MapOfStringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._MapOfStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._MapOfStringVector___nonzero__(self)

    def __bool__(self):
        return _libsbol._MapOfStringVector___bool__(self)

    def __len__(self):
        return _libsbol._MapOfStringVector___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsbol._MapOfStringVector___getitem__(self, key)

    def __delitem__(self, key):
        return _libsbol._MapOfStringVector___delitem__(self, key)

    def has_key(self, key):
        return _libsbol._MapOfStringVector_has_key(self, key)

    def keys(self):
        return _libsbol._MapOfStringVector_keys(self)

    def values(self):
        return _libsbol._MapOfStringVector_values(self)

    def items(self):
        return _libsbol._MapOfStringVector_items(self)

    def __contains__(self, key):
        return _libsbol._MapOfStringVector___contains__(self, key)

    def key_iterator(self):
        return _libsbol._MapOfStringVector_key_iterator(self)

    def value_iterator(self):
        return _libsbol._MapOfStringVector_value_iterator(self)

    def __setitem__(self, *args):
        return _libsbol._MapOfStringVector___setitem__(self, *args)

    def asdict(self):
        return _libsbol._MapOfStringVector_asdict(self)

    def __init__(self, *args):
        this = _libsbol.new__MapOfStringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _libsbol._MapOfStringVector_empty(self)

    def size(self):
        return _libsbol._MapOfStringVector_size(self)

    def swap(self, v):
        return _libsbol._MapOfStringVector_swap(self, v)

    def begin(self):
        return _libsbol._MapOfStringVector_begin(self)

    def end(self):
        return _libsbol._MapOfStringVector_end(self)

    def rbegin(self):
        return _libsbol._MapOfStringVector_rbegin(self)

    def rend(self):
        return _libsbol._MapOfStringVector_rend(self)

    def clear(self):
        return _libsbol._MapOfStringVector_clear(self)

    def get_allocator(self):
        return _libsbol._MapOfStringVector_get_allocator(self)

    def count(self, x):
        return _libsbol._MapOfStringVector_count(self, x)

    def erase(self, *args):
        return _libsbol._MapOfStringVector_erase(self, *args)

    def find(self, x):
        return _libsbol._MapOfStringVector_find(self, x)

    def lower_bound(self, x):
        return _libsbol._MapOfStringVector_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsbol._MapOfStringVector_upper_bound(self, x)
    __swig_destroy__ = _libsbol.delete__MapOfStringVector
    __del__ = lambda self: None
_MapOfStringVector_swigregister = _libsbol._MapOfStringVector_swigregister
_MapOfStringVector_swigregister(_MapOfStringVector)

class _MapOfSBOLObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _MapOfSBOLObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _MapOfSBOLObject, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbol._MapOfSBOLObject_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbol._MapOfSBOLObject___nonzero__(self)

    def __bool__(self):
        return _libsbol._MapOfSBOLObject___bool__(self)

    def __len__(self):
        return _libsbol._MapOfSBOLObject___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsbol._MapOfSBOLObject___getitem__(self, key)

    def __delitem__(self, key):
        return _libsbol._MapOfSBOLObject___delitem__(self, key)

    def has_key(self, key):
        return _libsbol._MapOfSBOLObject_has_key(self, key)

    def keys(self):
        return _libsbol._MapOfSBOLObject_keys(self)

    def values(self):
        return _libsbol._MapOfSBOLObject_values(self)

    def items(self):
        return _libsbol._MapOfSBOLObject_items(self)

    def __contains__(self, key):
        return _libsbol._MapOfSBOLObject___contains__(self, key)

    def key_iterator(self):
        return _libsbol._MapOfSBOLObject_key_iterator(self)

    def value_iterator(self):
        return _libsbol._MapOfSBOLObject_value_iterator(self)

    def __setitem__(self, *args):
        return _libsbol._MapOfSBOLObject___setitem__(self, *args)

    def asdict(self):
        return _libsbol._MapOfSBOLObject_asdict(self)

    def __init__(self, *args):
        this = _libsbol.new__MapOfSBOLObject(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _libsbol._MapOfSBOLObject_empty(self)

    def size(self):
        return _libsbol._MapOfSBOLObject_size(self)

    def swap(self, v):
        return _libsbol._MapOfSBOLObject_swap(self, v)

    def begin(self):
        return _libsbol._MapOfSBOLObject_begin(self)

    def end(self):
        return _libsbol._MapOfSBOLObject_end(self)

    def rbegin(self):
        return _libsbol._MapOfSBOLObject_rbegin(self)

    def rend(self):
        return _libsbol._MapOfSBOLObject_rend(self)

    def clear(self):
        return _libsbol._MapOfSBOLObject_clear(self)

    def get_allocator(self):
        return _libsbol._MapOfSBOLObject_get_allocator(self)

    def count(self, x):
        return _libsbol._MapOfSBOLObject_count(self, x)

    def erase(self, *args):
        return _libsbol._MapOfSBOLObject_erase(self, *args)

    def find(self, x):
        return _libsbol._MapOfSBOLObject_find(self, x)

    def lower_bound(self, x):
        return _libsbol._MapOfSBOLObject_lower_bound(self, x)

    def upper_bound(self, x):
        return _libsbol._MapOfSBOLObject_upper_bound(self, x)
    __swig_destroy__ = _libsbol.delete__MapOfSBOLObject
    __del__ = lambda self: None
_MapOfSBOLObject_swigregister = _libsbol._MapOfSBOLObject_swigregister
_MapOfSBOLObject_swigregister(_MapOfSBOLObject)


_libsbol.SBOL_URI_swigconstant(_libsbol)
SBOL_URI = _libsbol.SBOL_URI

_libsbol.RDF_URI_swigconstant(_libsbol)
RDF_URI = _libsbol.RDF_URI

_libsbol.PURL_URI_swigconstant(_libsbol)
PURL_URI = _libsbol.PURL_URI

_libsbol.PROV_URI_swigconstant(_libsbol)
PROV_URI = _libsbol.PROV_URI

_libsbol.NODENAME_ABOUT_swigconstant(_libsbol)
NODENAME_ABOUT = _libsbol.NODENAME_ABOUT

_libsbol.NODENAME_RESOURCE_swigconstant(_libsbol)
NODENAME_RESOURCE = _libsbol.NODENAME_RESOURCE

_libsbol.SBOL_IDENTIFIED_swigconstant(_libsbol)
SBOL_IDENTIFIED = _libsbol.SBOL_IDENTIFIED

_libsbol.SBOL_DOCUMENTED_swigconstant(_libsbol)
SBOL_DOCUMENTED = _libsbol.SBOL_DOCUMENTED

_libsbol.SBOL_TOP_LEVEL_swigconstant(_libsbol)
SBOL_TOP_LEVEL = _libsbol.SBOL_TOP_LEVEL

_libsbol.SBOL_GENERIC_TOP_LEVEL_swigconstant(_libsbol)
SBOL_GENERIC_TOP_LEVEL = _libsbol.SBOL_GENERIC_TOP_LEVEL

_libsbol.SBOL_SEQUENCE_ANNOTATION_swigconstant(_libsbol)
SBOL_SEQUENCE_ANNOTATION = _libsbol.SBOL_SEQUENCE_ANNOTATION

_libsbol.SBOL_COMPONENT_swigconstant(_libsbol)
SBOL_COMPONENT = _libsbol.SBOL_COMPONENT

_libsbol.SBOL_FUNCTIONAL_COMPONENT_swigconstant(_libsbol)
SBOL_FUNCTIONAL_COMPONENT = _libsbol.SBOL_FUNCTIONAL_COMPONENT

_libsbol.SBOL_COMPONENT_DEFINITION_swigconstant(_libsbol)
SBOL_COMPONENT_DEFINITION = _libsbol.SBOL_COMPONENT_DEFINITION

_libsbol.SBOL_SEQUENCE_swigconstant(_libsbol)
SBOL_SEQUENCE = _libsbol.SBOL_SEQUENCE

_libsbol.SBOL_MODULE_DEFINITION_swigconstant(_libsbol)
SBOL_MODULE_DEFINITION = _libsbol.SBOL_MODULE_DEFINITION

_libsbol.SBOL_MODULE_swigconstant(_libsbol)
SBOL_MODULE = _libsbol.SBOL_MODULE

_libsbol.SBOL_MODEL_swigconstant(_libsbol)
SBOL_MODEL = _libsbol.SBOL_MODEL

_libsbol.SBOL_MAPS_TO_swigconstant(_libsbol)
SBOL_MAPS_TO = _libsbol.SBOL_MAPS_TO

_libsbol.SBOL_INTERACTION_swigconstant(_libsbol)
SBOL_INTERACTION = _libsbol.SBOL_INTERACTION

_libsbol.SBOL_PARTICIPATION_swigconstant(_libsbol)
SBOL_PARTICIPATION = _libsbol.SBOL_PARTICIPATION

_libsbol.SBOL_SEQUENCE_CONSTRAINT_swigconstant(_libsbol)
SBOL_SEQUENCE_CONSTRAINT = _libsbol.SBOL_SEQUENCE_CONSTRAINT

_libsbol.SBOL_LOCATION_swigconstant(_libsbol)
SBOL_LOCATION = _libsbol.SBOL_LOCATION

_libsbol.SBOL_DOCUMENT_swigconstant(_libsbol)
SBOL_DOCUMENT = _libsbol.SBOL_DOCUMENT

_libsbol.SBOL_RANGE_swigconstant(_libsbol)
SBOL_RANGE = _libsbol.SBOL_RANGE

_libsbol.UNDEFINED_swigconstant(_libsbol)
UNDEFINED = _libsbol.UNDEFINED

_libsbol.SBOL_IDENTITY_swigconstant(_libsbol)
SBOL_IDENTITY = _libsbol.SBOL_IDENTITY

_libsbol.SBOL_PERSISTENT_IDENTITY_swigconstant(_libsbol)
SBOL_PERSISTENT_IDENTITY = _libsbol.SBOL_PERSISTENT_IDENTITY

_libsbol.SBOL_VERSION_swigconstant(_libsbol)
SBOL_VERSION = _libsbol.SBOL_VERSION

_libsbol.SBOL_DISPLAY_ID_swigconstant(_libsbol)
SBOL_DISPLAY_ID = _libsbol.SBOL_DISPLAY_ID

_libsbol.SBOL_NAME_swigconstant(_libsbol)
SBOL_NAME = _libsbol.SBOL_NAME

_libsbol.SBOL_DESCRIPTION_swigconstant(_libsbol)
SBOL_DESCRIPTION = _libsbol.SBOL_DESCRIPTION

_libsbol.SBOL_TYPES_swigconstant(_libsbol)
SBOL_TYPES = _libsbol.SBOL_TYPES

_libsbol.SBOL_START_swigconstant(_libsbol)
SBOL_START = _libsbol.SBOL_START

_libsbol.SBOL_END_swigconstant(_libsbol)
SBOL_END = _libsbol.SBOL_END

_libsbol.SBOL_SEQUENCE_ANNOTATIONS_swigconstant(_libsbol)
SBOL_SEQUENCE_ANNOTATIONS = _libsbol.SBOL_SEQUENCE_ANNOTATIONS

_libsbol.SBOL_COMPONENTS_swigconstant(_libsbol)
SBOL_COMPONENTS = _libsbol.SBOL_COMPONENTS

_libsbol.SBOL_ROLES_swigconstant(_libsbol)
SBOL_ROLES = _libsbol.SBOL_ROLES

_libsbol.SBOL_ELEMENTS_swigconstant(_libsbol)
SBOL_ELEMENTS = _libsbol.SBOL_ELEMENTS

_libsbol.SBOL_ENCODING_swigconstant(_libsbol)
SBOL_ENCODING = _libsbol.SBOL_ENCODING

_libsbol.SBOL_SEQUENCE_PROPERTY_swigconstant(_libsbol)
SBOL_SEQUENCE_PROPERTY = _libsbol.SBOL_SEQUENCE_PROPERTY

_libsbol.SBOL_WAS_DERIVED_FROM_swigconstant(_libsbol)
SBOL_WAS_DERIVED_FROM = _libsbol.SBOL_WAS_DERIVED_FROM

_libsbol.SBOL_DEFINITION_swigconstant(_libsbol)
SBOL_DEFINITION = _libsbol.SBOL_DEFINITION

_libsbol.SBOL_ACCESS_swigconstant(_libsbol)
SBOL_ACCESS = _libsbol.SBOL_ACCESS

_libsbol.SBOL_DIRECTION_swigconstant(_libsbol)
SBOL_DIRECTION = _libsbol.SBOL_DIRECTION

_libsbol.SBOL_MODELS_swigconstant(_libsbol)
SBOL_MODELS = _libsbol.SBOL_MODELS

_libsbol.SBOL_MODULES_swigconstant(_libsbol)
SBOL_MODULES = _libsbol.SBOL_MODULES

_libsbol.SBOL_FUNCTIONAL_COMPONENTS_swigconstant(_libsbol)
SBOL_FUNCTIONAL_COMPONENTS = _libsbol.SBOL_FUNCTIONAL_COMPONENTS

_libsbol.SBOL_INTERACTIONS_swigconstant(_libsbol)
SBOL_INTERACTIONS = _libsbol.SBOL_INTERACTIONS

_libsbol.SBOL_MAPS_TOS_swigconstant(_libsbol)
SBOL_MAPS_TOS = _libsbol.SBOL_MAPS_TOS

_libsbol.SBOL_PARTICIPATIONS_swigconstant(_libsbol)
SBOL_PARTICIPATIONS = _libsbol.SBOL_PARTICIPATIONS

_libsbol.SBOL_PARTICIPANT_swigconstant(_libsbol)
SBOL_PARTICIPANT = _libsbol.SBOL_PARTICIPANT

_libsbol.SBOL_LOCAL_swigconstant(_libsbol)
SBOL_LOCAL = _libsbol.SBOL_LOCAL

_libsbol.SBOL_REMOTE_swigconstant(_libsbol)
SBOL_REMOTE = _libsbol.SBOL_REMOTE

_libsbol.SBOL_REFINEMENT_swigconstant(_libsbol)
SBOL_REFINEMENT = _libsbol.SBOL_REFINEMENT

_libsbol.SBOL_SOURCE_swigconstant(_libsbol)
SBOL_SOURCE = _libsbol.SBOL_SOURCE

_libsbol.SBOL_LANGUAGE_swigconstant(_libsbol)
SBOL_LANGUAGE = _libsbol.SBOL_LANGUAGE

_libsbol.SBOL_FRAMEWORK_swigconstant(_libsbol)
SBOL_FRAMEWORK = _libsbol.SBOL_FRAMEWORK

_libsbol.SBOL_SEQUENCE_CONSTRAINTS_swigconstant(_libsbol)
SBOL_SEQUENCE_CONSTRAINTS = _libsbol.SBOL_SEQUENCE_CONSTRAINTS

_libsbol.SBOL_SUBJECT_swigconstant(_libsbol)
SBOL_SUBJECT = _libsbol.SBOL_SUBJECT

_libsbol.SBOL_OBJECT_swigconstant(_libsbol)
SBOL_OBJECT = _libsbol.SBOL_OBJECT

_libsbol.SBOL_RESTRICTION_swigconstant(_libsbol)
SBOL_RESTRICTION = _libsbol.SBOL_RESTRICTION

_libsbol.SBOL_ORIENTATION_swigconstant(_libsbol)
SBOL_ORIENTATION = _libsbol.SBOL_ORIENTATION

_libsbol.SBOL_LOCATIONS_swigconstant(_libsbol)
SBOL_LOCATIONS = _libsbol.SBOL_LOCATIONS

_libsbol.SBOL_ACCESS_PRIVATE_swigconstant(_libsbol)
SBOL_ACCESS_PRIVATE = _libsbol.SBOL_ACCESS_PRIVATE

_libsbol.SBOL_ACCESS_PUBLIC_swigconstant(_libsbol)
SBOL_ACCESS_PUBLIC = _libsbol.SBOL_ACCESS_PUBLIC

_libsbol.SBOL_DIRECTION_IN_swigconstant(_libsbol)
SBOL_DIRECTION_IN = _libsbol.SBOL_DIRECTION_IN

_libsbol.SBOL_DIRECTION_OUT_swigconstant(_libsbol)
SBOL_DIRECTION_OUT = _libsbol.SBOL_DIRECTION_OUT

_libsbol.SBOL_DIRECTION_IN_OUT_swigconstant(_libsbol)
SBOL_DIRECTION_IN_OUT = _libsbol.SBOL_DIRECTION_IN_OUT

_libsbol.SBOL_DIRECTION_NONE_swigconstant(_libsbol)
SBOL_DIRECTION_NONE = _libsbol.SBOL_DIRECTION_NONE

_libsbol.SBOL_PRECEDES_swigconstant(_libsbol)
SBOL_PRECEDES = _libsbol.SBOL_PRECEDES

_libsbol.SBOL_SAME_ORIENTATION_AS_swigconstant(_libsbol)
SBOL_SAME_ORIENTATION_AS = _libsbol.SBOL_SAME_ORIENTATION_AS

_libsbol.SBOL_OPPOSITE_ORIENTATION_AS_swigconstant(_libsbol)
SBOL_OPPOSITE_ORIENTATION_AS = _libsbol.SBOL_OPPOSITE_ORIENTATION_AS

_libsbol.SBOL_ENCODING_IUPAC_swigconstant(_libsbol)
SBOL_ENCODING_IUPAC = _libsbol.SBOL_ENCODING_IUPAC

_libsbol.SBOL_ENCODING_IUPAC_PROTEIN_swigconstant(_libsbol)
SBOL_ENCODING_IUPAC_PROTEIN = _libsbol.SBOL_ENCODING_IUPAC_PROTEIN

_libsbol.SBOL_ENCODING_SMILES_swigconstant(_libsbol)
SBOL_ENCODING_SMILES = _libsbol.SBOL_ENCODING_SMILES

_libsbol.SBOL_INLINE_swigconstant(_libsbol)
SBOL_INLINE = _libsbol.SBOL_INLINE

_libsbol.SBOL_REVERSE_COMPLEMENT_swigconstant(_libsbol)
SBOL_REVERSE_COMPLEMENT = _libsbol.SBOL_REVERSE_COMPLEMENT

_libsbol.SBO_swigconstant(_libsbol)
SBO = _libsbol.SBO

_libsbol.SBO_INHIBITION_swigconstant(_libsbol)
SBO_INHIBITION = _libsbol.SBO_INHIBITION

_libsbol.SBO_GENETIC_PRODUCTION_swigconstant(_libsbol)
SBO_GENETIC_PRODUCTION = _libsbol.SBO_GENETIC_PRODUCTION

_libsbol.SBO_STIMULATION_swigconstant(_libsbol)
SBO_STIMULATION = _libsbol.SBO_STIMULATION

_libsbol.SBO_NONCOVALENT_BINDING_swigconstant(_libsbol)
SBO_NONCOVALENT_BINDING = _libsbol.SBO_NONCOVALENT_BINDING

_libsbol.SBO_INHIBITOR_swigconstant(_libsbol)
SBO_INHIBITOR = _libsbol.SBO_INHIBITOR

_libsbol.SBO_STIMULATOR_swigconstant(_libsbol)
SBO_STIMULATOR = _libsbol.SBO_STIMULATOR

_libsbol.SBO_REACTANT_swigconstant(_libsbol)
SBO_REACTANT = _libsbol.SBO_REACTANT

_libsbol.SBO_PRODUCT_swigconstant(_libsbol)
SBO_PRODUCT = _libsbol.SBO_PRODUCT

_libsbol.SBO_LIGAND_swigconstant(_libsbol)
SBO_LIGAND = _libsbol.SBO_LIGAND

_libsbol.SBOL_NONCOVALENT_COMPLEX_swigconstant(_libsbol)
SBOL_NONCOVALENT_COMPLEX = _libsbol.SBOL_NONCOVALENT_COMPLEX

_libsbol.SO_UNDEFINED_swigconstant(_libsbol)
SO_UNDEFINED = _libsbol.SO_UNDEFINED

_libsbol.SBML_swigconstant(_libsbol)
SBML = _libsbol.SBML

_libsbol.CELLML_swigconstant(_libsbol)
CELLML = _libsbol.CELLML

_libsbol.BIOPAX_swigconstant(_libsbol)
BIOPAX = _libsbol.BIOPAX

def sbol_rule_10202(sbol_obj, arg):
    return _libsbol.sbol_rule_10202(sbol_obj, arg)
sbol_rule_10202 = _libsbol.sbol_rule_10202

def libsbol_rule_1(sbol_obj, arg):
    return _libsbol.libsbol_rule_1(sbol_obj, arg)
libsbol_rule_1 = _libsbol.libsbol_rule_1
class _StringProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _StringProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _StringProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new__StringProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete__StringProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol._StringProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol._StringProperty_getOwner(self)

    def get(self):
        return _libsbol._StringProperty_get(self)

    def add(self, new_value):
        return _libsbol._StringProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol._StringProperty_set(self, *args)

    def write(self):
        return _libsbol._StringProperty_write(self)

    def validate(self, arg=None):
        return _libsbol._StringProperty_validate(self, arg)
_StringProperty_swigregister = _libsbol._StringProperty_swigregister
_StringProperty_swigregister(_StringProperty)

class _IntProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _IntProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _IntProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new__IntProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete__IntProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol._IntProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol._IntProperty_getOwner(self)

    def get(self):
        return _libsbol._IntProperty_get(self)

    def add(self, new_value):
        return _libsbol._IntProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol._IntProperty_set(self, *args)

    def write(self):
        return _libsbol._IntProperty_write(self)

    def validate(self, arg=None):
        return _libsbol._IntProperty_validate(self, arg)
_IntProperty_swigregister = _libsbol._IntProperty_swigregister
_IntProperty_swigregister(_IntProperty)

class URIProperty(_StringProperty):
    __swig_setmethods__ = {}
    for _s in [_StringProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, URIProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [_StringProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, URIProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_URIProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_URIProperty
    __del__ = lambda self: None
URIProperty_swigregister = _libsbol.URIProperty_swigregister
URIProperty_swigregister(URIProperty)

class TextProperty(_StringProperty):
    __swig_setmethods__ = {}
    for _s in [_StringProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [_StringProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_TextProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_TextProperty
    __del__ = lambda self: None
TextProperty_swigregister = _libsbol.TextProperty_swigregister
TextProperty_swigregister(TextProperty)

class IntProperty(_IntProperty):
    __swig_setmethods__ = {}
    for _s in [_IntProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [_IntProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntProperty, name)
    __repr__ = _swig_repr

    def __init__(self, type_uri, property_owner, initial_value=0):
        this = _libsbol.new_IntProperty(type_uri, property_owner, initial_value)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_IntProperty
    __del__ = lambda self: None
IntProperty_swigregister = _libsbol.IntProperty_swigregister
IntProperty_swigregister(IntProperty)

class ReferencedObject(URIProperty):
    __swig_setmethods__ = {}
    for _s in [URIProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferencedObject, name, value)
    __swig_getmethods__ = {}
    for _s in [URIProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferencedObject, name)
    __repr__ = _swig_repr

    def __init__(self, type_uri, property_owner, initial_value):
        this = _libsbol.new_ReferencedObject(type_uri, property_owner, initial_value)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_ReferencedObject
    __del__ = lambda self: None
ReferencedObject_swigregister = _libsbol.ReferencedObject_swigregister
ReferencedObject_swigregister(ReferencedObject)

class SBOLObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SBOLObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SBOLObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doc"] = _libsbol.SBOLObject_doc_set
    __swig_getmethods__["doc"] = _libsbol.SBOLObject_doc_get
    if _newclass:
        doc = _swig_property(_libsbol.SBOLObject_doc_get, _libsbol.SBOLObject_doc_set)
    __swig_setmethods__["properties"] = _libsbol.SBOLObject_properties_set
    __swig_getmethods__["properties"] = _libsbol.SBOLObject_properties_get
    if _newclass:
        properties = _swig_property(_libsbol.SBOLObject_properties_get, _libsbol.SBOLObject_properties_set)
    __swig_setmethods__["list_properties"] = _libsbol.SBOLObject_list_properties_set
    __swig_getmethods__["list_properties"] = _libsbol.SBOLObject_list_properties_get
    if _newclass:
        list_properties = _swig_property(_libsbol.SBOLObject_list_properties_get, _libsbol.SBOLObject_list_properties_set)
    __swig_setmethods__["owned_objects"] = _libsbol.SBOLObject_owned_objects_set
    __swig_getmethods__["owned_objects"] = _libsbol.SBOLObject_owned_objects_get
    if _newclass:
        owned_objects = _swig_property(_libsbol.SBOLObject_owned_objects_get, _libsbol.SBOLObject_owned_objects_set)

    def __init__(self, *args):
        this = _libsbol.new_SBOLObject(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_SBOLObject
    __del__ = lambda self: None
    __swig_setmethods__["type"] = _libsbol.SBOLObject_type_set
    __swig_getmethods__["type"] = _libsbol.SBOLObject_type_get
    if _newclass:
        type = _swig_property(_libsbol.SBOLObject_type_get, _libsbol.SBOLObject_type_set)
    __swig_setmethods__["identity"] = _libsbol.SBOLObject_identity_set
    __swig_getmethods__["identity"] = _libsbol.SBOLObject_identity_get
    if _newclass:
        identity = _swig_property(_libsbol.SBOLObject_identity_get, _libsbol.SBOLObject_identity_set)

    def getTypeURI(self):
        return _libsbol.SBOLObject_getTypeURI(self)

    def serialize(self, sbol_serializer, sbol_world=None):
        return _libsbol.SBOLObject_serialize(self, sbol_serializer, sbol_world)

    def nest(self, rdfxml_buffer):
        return _libsbol.SBOLObject_nest(self, rdfxml_buffer)
SBOLObject_swigregister = _libsbol.SBOLObject_swigregister
SBOLObject_swigregister(SBOLObject)

class Identified(SBOLObject):
    __swig_setmethods__ = {}
    for _s in [SBOLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Identified, name, value)
    __swig_getmethods__ = {}
    for _s in [SBOLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Identified, name)
    __repr__ = _swig_repr
    __swig_setmethods__["persistentIdentity"] = _libsbol.Identified_persistentIdentity_set
    __swig_getmethods__["persistentIdentity"] = _libsbol.Identified_persistentIdentity_get
    if _newclass:
        persistentIdentity = _swig_property(_libsbol.Identified_persistentIdentity_get, _libsbol.Identified_persistentIdentity_set)
    __swig_setmethods__["displayId"] = _libsbol.Identified_displayId_set
    __swig_getmethods__["displayId"] = _libsbol.Identified_displayId_get
    if _newclass:
        displayId = _swig_property(_libsbol.Identified_displayId_get, _libsbol.Identified_displayId_set)
    __swig_setmethods__["version"] = _libsbol.Identified_version_set
    __swig_getmethods__["version"] = _libsbol.Identified_version_get
    if _newclass:
        version = _swig_property(_libsbol.Identified_version_get, _libsbol.Identified_version_set)
    __swig_setmethods__["wasDerivedFrom"] = _libsbol.Identified_wasDerivedFrom_set
    __swig_getmethods__["wasDerivedFrom"] = _libsbol.Identified_wasDerivedFrom_get
    if _newclass:
        wasDerivedFrom = _swig_property(_libsbol.Identified_wasDerivedFrom_get, _libsbol.Identified_wasDerivedFrom_set)
    __swig_setmethods__["name"] = _libsbol.Identified_name_set
    __swig_getmethods__["name"] = _libsbol.Identified_name_get
    if _newclass:
        name = _swig_property(_libsbol.Identified_name_get, _libsbol.Identified_name_set)
    __swig_setmethods__["description"] = _libsbol.Identified_description_set
    __swig_getmethods__["description"] = _libsbol.Identified_description_get
    if _newclass:
        description = _swig_property(_libsbol.Identified_description_get, _libsbol.Identified_description_set)

    def __init__(self, *args):
        this = _libsbol.new_Identified(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Identified
    __del__ = lambda self: None
Identified_swigregister = _libsbol.Identified_swigregister
Identified_swigregister(Identified)

class TopLevel(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TopLevel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_TopLevel(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def addToDocument(self, arg2):
        return _libsbol.TopLevel_addToDocument(self, arg2)
    __swig_destroy__ = _libsbol.delete_TopLevel
    __del__ = lambda self: None
TopLevel_swigregister = _libsbol.TopLevel_swigregister
TopLevel_swigregister(TopLevel)

class GenericTopLevel(TopLevel):
    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GenericTopLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GenericTopLevel, name)
    __repr__ = _swig_repr

    def __init__(self, uri_prefix, display_id):
        this = _libsbol.new_GenericTopLevel(uri_prefix, display_id)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_GenericTopLevel
    __del__ = lambda self: None
GenericTopLevel_swigregister = _libsbol.GenericTopLevel_swigregister
GenericTopLevel_swigregister(GenericTopLevel)

class Location(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Location, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Location, name)
    __repr__ = _swig_repr
    __swig_setmethods__["orientation"] = _libsbol.Location_orientation_set
    __swig_getmethods__["orientation"] = _libsbol.Location_orientation_get
    if _newclass:
        orientation = _swig_property(_libsbol.Location_orientation_get, _libsbol.Location_orientation_set)

    def __init__(self, *args):
        this = _libsbol.new_Location(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Location
    __del__ = lambda self: None
Location_swigregister = _libsbol.Location_swigregister
Location_swigregister(Location)

class Range(Location):
    __swig_setmethods__ = {}
    for _s in [Location]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    for _s in [Location]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start"] = _libsbol.Range_start_set
    __swig_getmethods__["start"] = _libsbol.Range_start_get
    if _newclass:
        start = _swig_property(_libsbol.Range_start_get, _libsbol.Range_start_set)
    __swig_setmethods__["end"] = _libsbol.Range_end_set
    __swig_getmethods__["end"] = _libsbol.Range_end_get
    if _newclass:
        end = _swig_property(_libsbol.Range_end_get, _libsbol.Range_end_set)

    def __init__(self, *args):
        this = _libsbol.new_Range(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Range
    __del__ = lambda self: None
Range_swigregister = _libsbol.Range_swigregister
Range_swigregister(Range)

class locationProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, locationProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, locationProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_locationProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_locationProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.locationProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.locationProperty_getOwner(self)

    def get(self):
        return _libsbol.locationProperty_get(self)

    def add(self, new_value):
        return _libsbol.locationProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.locationProperty_set(self, *args)

    def write(self):
        return _libsbol.locationProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.locationProperty_validate(self, arg)
locationProperty_swigregister = _libsbol.locationProperty_swigregister
locationProperty_swigregister(locationProperty)

class ownedLocation(locationProperty):
    __swig_setmethods__ = {}
    for _s in [locationProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [locationProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedLocation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedLocation_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedLocation_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedLocation_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedLocation
    __del__ = lambda self: None
ownedLocation_swigregister = _libsbol.ownedLocation_swigregister
ownedLocation_swigregister(ownedLocation)

class listOfOwnedLocations(ownedLocation):
    __swig_setmethods__ = {}
    for _s in [ownedLocation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedLocations, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedLocation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedLocations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedLocations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedLocations_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedLocations
    __del__ = lambda self: None
listOfOwnedLocations_swigregister = _libsbol.listOfOwnedLocations_swigregister
listOfOwnedLocations_swigregister(listOfOwnedLocations)

class SequenceAnnotation(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceAnnotation, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceAnnotation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["locations"] = _libsbol.SequenceAnnotation_locations_set
    __swig_getmethods__["locations"] = _libsbol.SequenceAnnotation_locations_get
    if _newclass:
        locations = _swig_property(_libsbol.SequenceAnnotation_locations_get, _libsbol.SequenceAnnotation_locations_set)

    def __init__(self, *args):
        this = _libsbol.new_SequenceAnnotation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_SequenceAnnotation
    __del__ = lambda self: None
SequenceAnnotation_swigregister = _libsbol.SequenceAnnotation_swigregister
SequenceAnnotation_swigregister(SequenceAnnotation)

class MapsTo(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapsTo, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MapsTo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["local"] = _libsbol.MapsTo_local_set
    __swig_getmethods__["local"] = _libsbol.MapsTo_local_get
    if _newclass:
        local = _swig_property(_libsbol.MapsTo_local_get, _libsbol.MapsTo_local_set)
    __swig_setmethods__["remote"] = _libsbol.MapsTo_remote_set
    __swig_getmethods__["remote"] = _libsbol.MapsTo_remote_get
    if _newclass:
        remote = _swig_property(_libsbol.MapsTo_remote_get, _libsbol.MapsTo_remote_set)
    __swig_setmethods__["refinement"] = _libsbol.MapsTo_refinement_set
    __swig_getmethods__["refinement"] = _libsbol.MapsTo_refinement_get
    if _newclass:
        refinement = _swig_property(_libsbol.MapsTo_refinement_get, _libsbol.MapsTo_refinement_set)

    def __init__(self, *args):
        this = _libsbol.new_MapsTo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_MapsTo
    __del__ = lambda self: None
MapsTo_swigregister = _libsbol.MapsTo_swigregister
MapsTo_swigregister(MapsTo)

class mapsToProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapsToProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapsToProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_mapsToProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_mapsToProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.mapsToProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.mapsToProperty_getOwner(self)

    def get(self):
        return _libsbol.mapsToProperty_get(self)

    def add(self, new_value):
        return _libsbol.mapsToProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.mapsToProperty_set(self, *args)

    def write(self):
        return _libsbol.mapsToProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.mapsToProperty_validate(self, arg)
mapsToProperty_swigregister = _libsbol.mapsToProperty_swigregister
mapsToProperty_swigregister(mapsToProperty)

class ownedMapsTo(mapsToProperty):
    __swig_setmethods__ = {}
    for _s in [mapsToProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedMapsTo, name, value)
    __swig_getmethods__ = {}
    for _s in [mapsToProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedMapsTo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedMapsTo(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedMapsTo_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedMapsTo_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedMapsTo_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedMapsTo
    __del__ = lambda self: None
ownedMapsTo_swigregister = _libsbol.ownedMapsTo_swigregister
ownedMapsTo_swigregister(ownedMapsTo)

class listOfOwnedMapsTos(ownedMapsTo):
    __swig_setmethods__ = {}
    for _s in [ownedMapsTo]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedMapsTos, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedMapsTo]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedMapsTos, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedMapsTos(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedMapsTos_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedMapsTos
    __del__ = lambda self: None
listOfOwnedMapsTos_swigregister = _libsbol.listOfOwnedMapsTos_swigregister
listOfOwnedMapsTos_swigregister(listOfOwnedMapsTos)

class ComponentInstance(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentInstance, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["definition"] = _libsbol.ComponentInstance_definition_set
    __swig_getmethods__["definition"] = _libsbol.ComponentInstance_definition_get
    if _newclass:
        definition = _swig_property(_libsbol.ComponentInstance_definition_get, _libsbol.ComponentInstance_definition_set)
    __swig_setmethods__["access"] = _libsbol.ComponentInstance_access_set
    __swig_getmethods__["access"] = _libsbol.ComponentInstance_access_get
    if _newclass:
        access = _swig_property(_libsbol.ComponentInstance_access_get, _libsbol.ComponentInstance_access_set)
    __swig_setmethods__["mapsTos"] = _libsbol.ComponentInstance_mapsTos_set
    __swig_getmethods__["mapsTos"] = _libsbol.ComponentInstance_mapsTos_get
    if _newclass:
        mapsTos = _swig_property(_libsbol.ComponentInstance_mapsTos_get, _libsbol.ComponentInstance_mapsTos_set)
    __swig_destroy__ = _libsbol.delete_ComponentInstance
    __del__ = lambda self: None
ComponentInstance_swigregister = _libsbol.ComponentInstance_swigregister
ComponentInstance_swigregister(ComponentInstance)

class Component(ComponentInstance):
    __swig_setmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component, name, value)
    __swig_getmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Component, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_Component(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Component
    __del__ = lambda self: None
Component_swigregister = _libsbol.Component_swigregister
Component_swigregister(Component)

class FunctionalComponent(ComponentInstance):
    __swig_setmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionalComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [ComponentInstance]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionalComponent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["direction"] = _libsbol.FunctionalComponent_direction_set
    __swig_getmethods__["direction"] = _libsbol.FunctionalComponent_direction_get
    if _newclass:
        direction = _swig_property(_libsbol.FunctionalComponent_direction_get, _libsbol.FunctionalComponent_direction_set)

    def __init__(self, *args):
        this = _libsbol.new_FunctionalComponent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_FunctionalComponent
    __del__ = lambda self: None
FunctionalComponent_swigregister = _libsbol.FunctionalComponent_swigregister
FunctionalComponent_swigregister(FunctionalComponent)

class SequenceConstraint(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subject"] = _libsbol.SequenceConstraint_subject_set
    __swig_getmethods__["subject"] = _libsbol.SequenceConstraint_subject_get
    if _newclass:
        subject = _swig_property(_libsbol.SequenceConstraint_subject_get, _libsbol.SequenceConstraint_subject_set)
    __swig_setmethods__["object"] = _libsbol.SequenceConstraint_object_set
    __swig_getmethods__["object"] = _libsbol.SequenceConstraint_object_get
    if _newclass:
        object = _swig_property(_libsbol.SequenceConstraint_object_get, _libsbol.SequenceConstraint_object_set)
    __swig_setmethods__["restriction"] = _libsbol.SequenceConstraint_restriction_set
    __swig_getmethods__["restriction"] = _libsbol.SequenceConstraint_restriction_get
    if _newclass:
        restriction = _swig_property(_libsbol.SequenceConstraint_restriction_get, _libsbol.SequenceConstraint_restriction_set)

    def __init__(self, *args):
        this = _libsbol.new_SequenceConstraint(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_SequenceConstraint
    __del__ = lambda self: None
SequenceConstraint_swigregister = _libsbol.SequenceConstraint_swigregister
SequenceConstraint_swigregister(SequenceConstraint)

class sequenceConstraintProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequenceConstraintProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequenceConstraintProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_sequenceConstraintProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_sequenceConstraintProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.sequenceConstraintProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.sequenceConstraintProperty_getOwner(self)

    def get(self):
        return _libsbol.sequenceConstraintProperty_get(self)

    def add(self, new_value):
        return _libsbol.sequenceConstraintProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.sequenceConstraintProperty_set(self, *args)

    def write(self):
        return _libsbol.sequenceConstraintProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.sequenceConstraintProperty_validate(self, arg)
sequenceConstraintProperty_swigregister = _libsbol.sequenceConstraintProperty_swigregister
sequenceConstraintProperty_swigregister(sequenceConstraintProperty)

class ownedSequenceConstraint(sequenceConstraintProperty):
    __swig_setmethods__ = {}
    for _s in [sequenceConstraintProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedSequenceConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [sequenceConstraintProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedSequenceConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedSequenceConstraint(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedSequenceConstraint_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedSequenceConstraint_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedSequenceConstraint_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedSequenceConstraint
    __del__ = lambda self: None
ownedSequenceConstraint_swigregister = _libsbol.ownedSequenceConstraint_swigregister
ownedSequenceConstraint_swigregister(ownedSequenceConstraint)

class listOfOwnedSequenceConstraints(ownedSequenceConstraint):
    __swig_setmethods__ = {}
    for _s in [ownedSequenceConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedSequenceConstraints, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedSequenceConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedSequenceConstraints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedSequenceConstraints(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedSequenceConstraints_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedSequenceConstraints
    __del__ = lambda self: None
listOfOwnedSequenceConstraints_swigregister = _libsbol.listOfOwnedSequenceConstraints_swigregister
listOfOwnedSequenceConstraints_swigregister(listOfOwnedSequenceConstraints)

class sequenceAnnotationProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequenceAnnotationProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequenceAnnotationProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_sequenceAnnotationProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_sequenceAnnotationProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.sequenceAnnotationProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.sequenceAnnotationProperty_getOwner(self)

    def get(self):
        return _libsbol.sequenceAnnotationProperty_get(self)

    def add(self, new_value):
        return _libsbol.sequenceAnnotationProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.sequenceAnnotationProperty_set(self, *args)

    def write(self):
        return _libsbol.sequenceAnnotationProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.sequenceAnnotationProperty_validate(self, arg)
sequenceAnnotationProperty_swigregister = _libsbol.sequenceAnnotationProperty_swigregister
sequenceAnnotationProperty_swigregister(sequenceAnnotationProperty)

class ownedSequenceAnnotation(sequenceAnnotationProperty):
    __swig_setmethods__ = {}
    for _s in [sequenceAnnotationProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedSequenceAnnotation, name, value)
    __swig_getmethods__ = {}
    for _s in [sequenceAnnotationProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedSequenceAnnotation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedSequenceAnnotation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedSequenceAnnotation_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedSequenceAnnotation_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedSequenceAnnotation_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedSequenceAnnotation
    __del__ = lambda self: None
ownedSequenceAnnotation_swigregister = _libsbol.ownedSequenceAnnotation_swigregister
ownedSequenceAnnotation_swigregister(ownedSequenceAnnotation)

class listOfOwnedSequenceAnnotations(ownedSequenceAnnotation):
    __swig_setmethods__ = {}
    for _s in [ownedSequenceAnnotation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedSequenceAnnotations, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedSequenceAnnotation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedSequenceAnnotations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedSequenceAnnotations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedSequenceAnnotations_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedSequenceAnnotations
    __del__ = lambda self: None
listOfOwnedSequenceAnnotations_swigregister = _libsbol.listOfOwnedSequenceAnnotations_swigregister
listOfOwnedSequenceAnnotations_swigregister(listOfOwnedSequenceAnnotations)

class ComponentDefinition(TopLevel):
    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComponentDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComponentDefinition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["types"] = _libsbol.ComponentDefinition_types_set
    __swig_getmethods__["types"] = _libsbol.ComponentDefinition_types_get
    if _newclass:
        types = _swig_property(_libsbol.ComponentDefinition_types_get, _libsbol.ComponentDefinition_types_set)
    __swig_setmethods__["roles"] = _libsbol.ComponentDefinition_roles_set
    __swig_getmethods__["roles"] = _libsbol.ComponentDefinition_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.ComponentDefinition_roles_get, _libsbol.ComponentDefinition_roles_set)
    __swig_setmethods__["sequence"] = _libsbol.ComponentDefinition_sequence_set
    __swig_getmethods__["sequence"] = _libsbol.ComponentDefinition_sequence_get
    if _newclass:
        sequence = _swig_property(_libsbol.ComponentDefinition_sequence_get, _libsbol.ComponentDefinition_sequence_set)
    __swig_setmethods__["sequenceAnnotations"] = _libsbol.ComponentDefinition_sequenceAnnotations_set
    __swig_getmethods__["sequenceAnnotations"] = _libsbol.ComponentDefinition_sequenceAnnotations_get
    if _newclass:
        sequenceAnnotations = _swig_property(_libsbol.ComponentDefinition_sequenceAnnotations_get, _libsbol.ComponentDefinition_sequenceAnnotations_set)
    __swig_setmethods__["components"] = _libsbol.ComponentDefinition_components_set
    __swig_getmethods__["components"] = _libsbol.ComponentDefinition_components_get
    if _newclass:
        components = _swig_property(_libsbol.ComponentDefinition_components_get, _libsbol.ComponentDefinition_components_set)
    __swig_setmethods__["sequenceConstraints"] = _libsbol.ComponentDefinition_sequenceConstraints_set
    __swig_getmethods__["sequenceConstraints"] = _libsbol.ComponentDefinition_sequenceConstraints_get
    if _newclass:
        sequenceConstraints = _swig_property(_libsbol.ComponentDefinition_sequenceConstraints_get, _libsbol.ComponentDefinition_sequenceConstraints_set)

    def __init__(self, *args):
        this = _libsbol.new_ComponentDefinition(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_ComponentDefinition
    __del__ = lambda self: None
ComponentDefinition_swigregister = _libsbol.ComponentDefinition_swigregister
ComponentDefinition_swigregister(ComponentDefinition)

class Sequence(TopLevel):
    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sequence, name)
    __repr__ = _swig_repr
    __swig_setmethods__["elements"] = _libsbol.Sequence_elements_set
    __swig_getmethods__["elements"] = _libsbol.Sequence_elements_get
    if _newclass:
        elements = _swig_property(_libsbol.Sequence_elements_get, _libsbol.Sequence_elements_set)
    __swig_setmethods__["encoding"] = _libsbol.Sequence_encoding_set
    __swig_getmethods__["encoding"] = _libsbol.Sequence_encoding_get
    if _newclass:
        encoding = _swig_property(_libsbol.Sequence_encoding_get, _libsbol.Sequence_encoding_set)

    def __init__(self, *args):
        this = _libsbol.new_Sequence(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Sequence
    __del__ = lambda self: None
Sequence_swigregister = _libsbol.Sequence_swigregister
Sequence_swigregister(Sequence)

class listOfURIs(URIProperty):
    __swig_setmethods__ = {}
    for _s in [URIProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfURIs, name, value)
    __swig_getmethods__ = {}
    for _s in [URIProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfURIs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfURIs(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfURIs_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfURIs
    __del__ = lambda self: None
listOfURIs_swigregister = _libsbol.listOfURIs_swigregister
listOfURIs_swigregister(listOfURIs)

class Participation(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Participation, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Participation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["roles"] = _libsbol.Participation_roles_set
    __swig_getmethods__["roles"] = _libsbol.Participation_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.Participation_roles_get, _libsbol.Participation_roles_set)
    __swig_setmethods__["participant"] = _libsbol.Participation_participant_set
    __swig_getmethods__["participant"] = _libsbol.Participation_participant_get
    if _newclass:
        participant = _swig_property(_libsbol.Participation_participant_get, _libsbol.Participation_participant_set)

    def __init__(self, *args):
        this = _libsbol.new_Participation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Participation
    __del__ = lambda self: None
Participation_swigregister = _libsbol.Participation_swigregister
Participation_swigregister(Participation)

class participationProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, participationProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, participationProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_participationProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_participationProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.participationProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.participationProperty_getOwner(self)

    def get(self):
        return _libsbol.participationProperty_get(self)

    def add(self, new_value):
        return _libsbol.participationProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.participationProperty_set(self, *args)

    def write(self):
        return _libsbol.participationProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.participationProperty_validate(self, arg)
participationProperty_swigregister = _libsbol.participationProperty_swigregister
participationProperty_swigregister(participationProperty)

class ownedParticipation(participationProperty):
    __swig_setmethods__ = {}
    for _s in [participationProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedParticipation, name, value)
    __swig_getmethods__ = {}
    for _s in [participationProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedParticipation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedParticipation(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedParticipation_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedParticipation_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedParticipation_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedParticipation
    __del__ = lambda self: None
ownedParticipation_swigregister = _libsbol.ownedParticipation_swigregister
ownedParticipation_swigregister(ownedParticipation)

class listOfOwnedParticipations(ownedParticipation):
    __swig_setmethods__ = {}
    for _s in [ownedParticipation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedParticipations, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedParticipation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedParticipations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedParticipations(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedParticipations_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedParticipations
    __del__ = lambda self: None
listOfOwnedParticipations_swigregister = _libsbol.listOfOwnedParticipations_swigregister
listOfOwnedParticipations_swigregister(listOfOwnedParticipations)

class Interaction(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interaction, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Interaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["types"] = _libsbol.Interaction_types_set
    __swig_getmethods__["types"] = _libsbol.Interaction_types_get
    if _newclass:
        types = _swig_property(_libsbol.Interaction_types_get, _libsbol.Interaction_types_set)
    __swig_setmethods__["participations"] = _libsbol.Interaction_participations_set
    __swig_getmethods__["participations"] = _libsbol.Interaction_participations_get
    if _newclass:
        participations = _swig_property(_libsbol.Interaction_participations_get, _libsbol.Interaction_participations_set)

    def __init__(self, *args):
        this = _libsbol.new_Interaction(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Interaction
    __del__ = lambda self: None
Interaction_swigregister = _libsbol.Interaction_swigregister
Interaction_swigregister(Interaction)

class Module(Identified):
    __swig_setmethods__ = {}
    for _s in [Identified]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    for _s in [Identified]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    __swig_setmethods__["definition"] = _libsbol.Module_definition_set
    __swig_getmethods__["definition"] = _libsbol.Module_definition_get
    if _newclass:
        definition = _swig_property(_libsbol.Module_definition_get, _libsbol.Module_definition_set)

    def __init__(self, *args):
        this = _libsbol.new_Module(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Module
    __del__ = lambda self: None
Module_swigregister = _libsbol.Module_swigregister
Module_swigregister(Module)

class Model(TopLevel):
    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _libsbol.Model_source_set
    __swig_getmethods__["source"] = _libsbol.Model_source_get
    if _newclass:
        source = _swig_property(_libsbol.Model_source_get, _libsbol.Model_source_set)
    __swig_setmethods__["language"] = _libsbol.Model_language_set
    __swig_getmethods__["language"] = _libsbol.Model_language_get
    if _newclass:
        language = _swig_property(_libsbol.Model_language_get, _libsbol.Model_language_set)
    __swig_setmethods__["framework"] = _libsbol.Model_framework_set
    __swig_getmethods__["framework"] = _libsbol.Model_framework_get
    if _newclass:
        framework = _swig_property(_libsbol.Model_framework_get, _libsbol.Model_framework_set)

    def __init__(self, *args):
        this = _libsbol.new_Model(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_Model
    __del__ = lambda self: None
Model_swigregister = _libsbol.Model_swigregister
Model_swigregister(Model)

class moduleProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, moduleProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, moduleProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_moduleProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_moduleProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.moduleProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.moduleProperty_getOwner(self)

    def get(self):
        return _libsbol.moduleProperty_get(self)

    def add(self, new_value):
        return _libsbol.moduleProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.moduleProperty_set(self, *args)

    def write(self):
        return _libsbol.moduleProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.moduleProperty_validate(self, arg)
moduleProperty_swigregister = _libsbol.moduleProperty_swigregister
moduleProperty_swigregister(moduleProperty)

class ownedModule(moduleProperty):
    __swig_setmethods__ = {}
    for _s in [moduleProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedModule, name, value)
    __swig_getmethods__ = {}
    for _s in [moduleProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedModule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedModule(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedModule_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedModule_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedModule_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedModule
    __del__ = lambda self: None
ownedModule_swigregister = _libsbol.ownedModule_swigregister
ownedModule_swigregister(ownedModule)

class listOfOwnedModules(ownedModule):
    __swig_setmethods__ = {}
    for _s in [ownedModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedModules, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedModules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedModules(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedModules_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedModules
    __del__ = lambda self: None
listOfOwnedModules_swigregister = _libsbol.listOfOwnedModules_swigregister
listOfOwnedModules_swigregister(listOfOwnedModules)

class interactionProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interactionProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interactionProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_interactionProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_interactionProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.interactionProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.interactionProperty_getOwner(self)

    def get(self):
        return _libsbol.interactionProperty_get(self)

    def add(self, new_value):
        return _libsbol.interactionProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.interactionProperty_set(self, *args)

    def write(self):
        return _libsbol.interactionProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.interactionProperty_validate(self, arg)
interactionProperty_swigregister = _libsbol.interactionProperty_swigregister
interactionProperty_swigregister(interactionProperty)

class ownedInteraction(interactionProperty):
    __swig_setmethods__ = {}
    for _s in [interactionProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedInteraction, name, value)
    __swig_getmethods__ = {}
    for _s in [interactionProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedInteraction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedInteraction(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedInteraction_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedInteraction_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedInteraction_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedInteraction
    __del__ = lambda self: None
ownedInteraction_swigregister = _libsbol.ownedInteraction_swigregister
ownedInteraction_swigregister(ownedInteraction)

class listOfOwnedInteractions(ownedInteraction):
    __swig_setmethods__ = {}
    for _s in [ownedInteraction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedInteractions, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedInteraction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedInteractions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedInteractions(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedInteractions_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedInteractions
    __del__ = lambda self: None
listOfOwnedInteractions_swigregister = _libsbol.listOfOwnedInteractions_swigregister
listOfOwnedInteractions_swigregister(listOfOwnedInteractions)

class functionalComponentProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, functionalComponentProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, functionalComponentProperty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_functionalComponentProperty(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_functionalComponentProperty
    __del__ = lambda self: None

    def getTypeURI(self):
        return _libsbol.functionalComponentProperty_getTypeURI(self)

    def getOwner(self):
        return _libsbol.functionalComponentProperty_getOwner(self)

    def get(self):
        return _libsbol.functionalComponentProperty_get(self)

    def add(self, new_value):
        return _libsbol.functionalComponentProperty_add(self, new_value)

    def set(self, *args):
        return _libsbol.functionalComponentProperty_set(self, *args)

    def write(self):
        return _libsbol.functionalComponentProperty_write(self)

    def validate(self, arg=None):
        return _libsbol.functionalComponentProperty_validate(self, arg)
functionalComponentProperty_swigregister = _libsbol.functionalComponentProperty_swigregister
functionalComponentProperty_swigregister(functionalComponentProperty)

class ownedFunctionalComponent(functionalComponentProperty):
    __swig_setmethods__ = {}
    for _s in [functionalComponentProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ownedFunctionalComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [functionalComponentProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ownedFunctionalComponent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_ownedFunctionalComponent(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add(self, sbol_obj):
        return _libsbol.ownedFunctionalComponent_add(self, sbol_obj)

    def get(self, object_id):
        return _libsbol.ownedFunctionalComponent_get(self, object_id)

    def create(self, *args):
        return _libsbol.ownedFunctionalComponent_create(self, *args)
    __swig_destroy__ = _libsbol.delete_ownedFunctionalComponent
    __del__ = lambda self: None
ownedFunctionalComponent_swigregister = _libsbol.ownedFunctionalComponent_swigregister
ownedFunctionalComponent_swigregister(ownedFunctionalComponent)

class listOfOwnedFunctionalComponents(ownedFunctionalComponent):
    __swig_setmethods__ = {}
    for _s in [ownedFunctionalComponent]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, listOfOwnedFunctionalComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [ownedFunctionalComponent]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, listOfOwnedFunctionalComponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libsbol.new_listOfOwnedFunctionalComponents(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def remove(self, index):
        return _libsbol.listOfOwnedFunctionalComponents_remove(self, index)
    __swig_destroy__ = _libsbol.delete_listOfOwnedFunctionalComponents
    __del__ = lambda self: None
listOfOwnedFunctionalComponents_swigregister = _libsbol.listOfOwnedFunctionalComponents_swigregister
listOfOwnedFunctionalComponents_swigregister(listOfOwnedFunctionalComponents)

class ModuleDefinition(TopLevel):
    __swig_setmethods__ = {}
    for _s in [TopLevel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [TopLevel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleDefinition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["roles"] = _libsbol.ModuleDefinition_roles_set
    __swig_getmethods__["roles"] = _libsbol.ModuleDefinition_roles_get
    if _newclass:
        roles = _swig_property(_libsbol.ModuleDefinition_roles_get, _libsbol.ModuleDefinition_roles_set)
    __swig_setmethods__["models"] = _libsbol.ModuleDefinition_models_set
    __swig_getmethods__["models"] = _libsbol.ModuleDefinition_models_get
    if _newclass:
        models = _swig_property(_libsbol.ModuleDefinition_models_get, _libsbol.ModuleDefinition_models_set)
    __swig_setmethods__["modules"] = _libsbol.ModuleDefinition_modules_set
    __swig_getmethods__["modules"] = _libsbol.ModuleDefinition_modules_get
    if _newclass:
        modules = _swig_property(_libsbol.ModuleDefinition_modules_get, _libsbol.ModuleDefinition_modules_set)
    __swig_setmethods__["interactions"] = _libsbol.ModuleDefinition_interactions_set
    __swig_getmethods__["interactions"] = _libsbol.ModuleDefinition_interactions_get
    if _newclass:
        interactions = _swig_property(_libsbol.ModuleDefinition_interactions_get, _libsbol.ModuleDefinition_interactions_set)
    __swig_setmethods__["functionalComponents"] = _libsbol.ModuleDefinition_functionalComponents_set
    __swig_getmethods__["functionalComponents"] = _libsbol.ModuleDefinition_functionalComponents_get
    if _newclass:
        functionalComponents = _swig_property(_libsbol.ModuleDefinition_functionalComponents_get, _libsbol.ModuleDefinition_functionalComponents_set)

    def __init__(self, *args):
        this = _libsbol.new_ModuleDefinition(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _libsbol.delete_ModuleDefinition
    __del__ = lambda self: None
ModuleDefinition_swigregister = _libsbol.ModuleDefinition_swigregister
ModuleDefinition_swigregister(ModuleDefinition)

class Document(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _libsbol.new_Document()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["SBOLObjects"] = _libsbol.Document_SBOLObjects_set
    __swig_getmethods__["SBOLObjects"] = _libsbol.Document_SBOLObjects_get
    if _newclass:
        SBOLObjects = _swig_property(_libsbol.Document_SBOLObjects_get, _libsbol.Document_SBOLObjects_set)
    __swig_setmethods__["componentDefinitions"] = _libsbol.Document_componentDefinitions_set
    __swig_getmethods__["componentDefinitions"] = _libsbol.Document_componentDefinitions_get
    if _newclass:
        componentDefinitions = _swig_property(_libsbol.Document_componentDefinitions_get, _libsbol.Document_componentDefinitions_set)
    __swig_setmethods__["models"] = _libsbol.Document_models_set
    __swig_getmethods__["models"] = _libsbol.Document_models_get
    if _newclass:
        models = _swig_property(_libsbol.Document_models_get, _libsbol.Document_models_set)
    __swig_setmethods__["moduleDefinitions"] = _libsbol.Document_moduleDefinitions_set
    __swig_getmethods__["moduleDefinitions"] = _libsbol.Document_moduleDefinitions_get
    if _newclass:
        moduleDefinitions = _swig_property(_libsbol.Document_moduleDefinitions_get, _libsbol.Document_moduleDefinitions_set)
    __swig_setmethods__["sequences"] = _libsbol.Document_sequences_set
    __swig_getmethods__["sequences"] = _libsbol.Document_sequences_get
    if _newclass:
        sequences = _swig_property(_libsbol.Document_sequences_get, _libsbol.Document_sequences_set)
    __swig_setmethods__["nameSpaces"] = _libsbol.Document_nameSpaces_set
    __swig_getmethods__["nameSpaces"] = _libsbol.Document_nameSpaces_get
    if _newclass:
        nameSpaces = _swig_property(_libsbol.Document_nameSpaces_get, _libsbol.Document_nameSpaces_set)

    def getTopLevel(self, arg2):
        return _libsbol.Document_getTopLevel(self, arg2)

    def getWorld(self):
        return _libsbol.Document_getWorld(self)

    def write(self, filename):
        return _libsbol.Document_write(self, filename)

    def read(self, filename):
        return _libsbol.Document_read(self, filename)
    __swig_getmethods__["parse_objects"] = lambda x: _libsbol.Document_parse_objects
    if _newclass:
        parse_objects = staticmethod(_libsbol.Document_parse_objects)
    __swig_getmethods__["parse_properties"] = lambda x: _libsbol.Document_parse_properties
    if _newclass:
        parse_properties = staticmethod(_libsbol.Document_parse_properties)

    def flatten(self):
        return _libsbol.Document_flatten(self)

    def addComponentDefinition(self, sbol_obj):
        return _libsbol.Document_addComponentDefinition(self, sbol_obj)

    def addSequence(self, sbol_obj):
        return _libsbol.Document_addSequence(self, sbol_obj)

    def addModel(self, sbol_obj):
        return _libsbol.Document_addModel(self, sbol_obj)

    def addModuleDefinition(self, sbol_obj):
        return _libsbol.Document_addModuleDefinition(self, sbol_obj)

    def getComponentDefinition(self, uri):
        return _libsbol.Document_getComponentDefinition(self, uri)

    def getSequence(self, uri):
        return _libsbol.Document_getSequence(self, uri)

    def getModel(self, uri):
        return _libsbol.Document_getModel(self, uri)

    def getModuleDefinition(self, uri):
        return _libsbol.Document_getModuleDefinition(self, uri)
    __swig_destroy__ = _libsbol.delete_Document
    __del__ = lambda self: None
Document_swigregister = _libsbol.Document_swigregister
Document_swigregister(Document)
cvar = _libsbol.cvar

def Document_parse_objects(user_data, triple):
    return _libsbol.Document_parse_objects(user_data, triple)
Document_parse_objects = _libsbol.Document_parse_objects

def Document_parse_properties(user_data, triple):
    return _libsbol.Document_parse_properties(user_data, triple)
Document_parse_properties = _libsbol.Document_parse_properties


def cut_sbol_resource(xml_string, resource_id):
    return _libsbol.cut_sbol_resource(xml_string, resource_id)
cut_sbol_resource = _libsbol.cut_sbol_resource

def replace_reference_to_resource(xml_string, resource_id, replacement_text):
    return _libsbol.replace_reference_to_resource(xml_string, resource_id, replacement_text)
replace_reference_to_resource = _libsbol.replace_reference_to_resource

def seek_element(xml_buffer, uri):
    return _libsbol.seek_element(xml_buffer, uri)
seek_element = _libsbol.seek_element

def seek_next_element(xml_buffer):
    return _libsbol.seek_next_element(xml_buffer)
seek_next_element = _libsbol.seek_next_element

def seek_new_line(xml_buffer):
    return _libsbol.seek_new_line(xml_buffer)
seek_new_line = _libsbol.seek_new_line

def seek_end_of_line(xml_buffer):
    return _libsbol.seek_end_of_line(xml_buffer)
seek_end_of_line = _libsbol.seek_end_of_line

def seek_end_of_element(xml_buffer):
    return _libsbol.seek_end_of_element(xml_buffer)
seek_end_of_element = _libsbol.seek_end_of_element

def seek_end_of_node(xml_buffer, uri):
    return _libsbol.seek_end_of_node(xml_buffer, uri)
seek_end_of_node = _libsbol.seek_end_of_node

def seek_resource(xml_buffer, uri):
    return _libsbol.seek_resource(xml_buffer, uri)
seek_resource = _libsbol.seek_resource

def is_open_node(xml_buffer):
    return _libsbol.is_open_node(xml_buffer)
is_open_node = _libsbol.is_open_node

def indent(text, indentation):
    return _libsbol.indent(text, indentation)
indent = _libsbol.indent

def get_qname(xml_buffer):
    return _libsbol.get_qname(xml_buffer)
get_qname = _libsbol.get_qname

def get_local_part(qname):
    return _libsbol.get_local_part(qname)
get_local_part = _libsbol.get_local_part

def get_prefix(qname):
    return _libsbol.get_prefix(qname)
get_prefix = _libsbol.get_prefix

def parse_element(xml_buffer):
    return _libsbol.parse_element(xml_buffer)
parse_element = _libsbol.parse_element
# This file is compatible with both classic and new-style classes.


